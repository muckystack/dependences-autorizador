import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class Searcher {
    constructor() {
        this.list = [];
        this.searchProperty = '';
        this.searchText = '';
        this.previousSearchText = '';
        this.previousInputtype = '';
        this.filteredList = [];
        this.previousFilteredList = [];
        this.shouldReturnPreviousFilteredList = true;
    }
    initSearch(list, searchProperties) {
        if (searchProperties.length > 1) {
            this.list = list.map(item => ({ ...item, concatedValues: this.concateValues(item, searchProperties) }));
            this.searchProperty = 'concatedValues';
        }
        else {
            this.list = list;
            this.searchProperty = searchProperties[0];
        }
        this.previousFilteredList = this.list;
    }
    filterList(inputEvent) {
        if (inputEvent.data === ' ') {
            return;
        }
        const searchText = inputEvent.target.value;
        const removeWhitespaces = (text) => text.split(' ').join('');
        const searchTextInLowerCase = removeWhitespaces(searchText).toLocaleLowerCase();
        this.searchText = searchTextInLowerCase;
        const list = this.getList();
        this.previousSearchText = searchTextInLowerCase;
        this.previousInputtype = inputEvent.inputType;
        if (!list) {
            this.filteredList = this.previousFilteredList;
            return this.previousFilteredList;
        }
        this.filteredList = list.filter(item => removeWhitespaces(item[this.searchProperty]).toLowerCase().includes(this.searchText));
        return this.filteredList;
    }
    concateValues(item, searchProperties) {
        let concatedValues = '';
        searchProperties.forEach(property => concatedValues += item[property]);
        return concatedValues;
    }
    getList() {
        if (this.previousSearchText && this.searchText.includes(this.previousSearchText)) {
            this.previousFilteredList = this.filteredList;
            this.shouldReturnPreviousFilteredList = true;
            return this.filteredList;
        }
        const isLastTextFromPaste = this.previousInputtype === 'insertFromPaste';
        const canReturnPreviousFilteredList = this.isBackSpacedLastChar() &&
            !isLastTextFromPaste && this.shouldReturnPreviousFilteredList;
        if (canReturnPreviousFilteredList) {
            this.shouldReturnPreviousFilteredList = false;
            return;
        }
        return this.list;
    }
    isBackSpacedLastChar() {
        const isTextDecrementedBy1 = this.previousSearchText.length - this.searchText.length === 1;
        const lastChar = this.previousSearchText.charAt(this.previousSearchText.length - 1);
        const concatedText = this.searchText + lastChar;
        return isTextDecrementedBy1 && concatedText === this.previousSearchText;
    }
}
Searcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.5", ngImport: i0, type: Searcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
Searcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.0.5", ngImport: i0, type: Searcher });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.5", ngImport: i0, type: Searcher, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL21hdC1zZWxlY3Qtc2VhcmNoL3NyYy9saWIvc2VhcmNoZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUczQyxNQUFNLE9BQU8sUUFBUTtJQURyQjtRQUVVLFNBQUksR0FBNkIsRUFBRSxDQUFDO1FBQ3BDLG1CQUFjLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLGVBQVUsR0FBRyxFQUFFLENBQUM7UUFDaEIsdUJBQWtCLEdBQUcsRUFBRSxDQUFDO1FBQ3hCLHNCQUFpQixHQUFHLEVBQUUsQ0FBQztRQUN2QixpQkFBWSxHQUE2QixFQUFFLENBQUM7UUFDNUMseUJBQW9CLEdBQTZCLEVBQUUsQ0FBQztRQUNwRCxxQ0FBZ0MsR0FBRyxJQUFJLENBQUM7S0FnRWpEO0lBOURDLFVBQVUsQ0FBQyxJQUE4QixFQUFFLGdCQUEwQjtRQUNuRSxJQUFJLGdCQUFnQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDL0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FDM0IsRUFBQyxHQUFHLElBQUksRUFBRSxjQUFjLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLENBQUMsRUFBQyxDQUN0RSxDQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsY0FBYyxHQUFHLGdCQUFnQixDQUFDO1NBQ3hDO2FBQU07WUFDTCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztZQUNqQixJQUFJLENBQUMsY0FBYyxHQUFHLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzNDO1FBQ0QsSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDeEMsQ0FBQztJQUVELFVBQVUsQ0FBQyxVQUFzQjtRQUMvQixJQUFJLFVBQVUsQ0FBQyxJQUFJLEtBQUssR0FBRyxFQUFFO1lBQUUsT0FBTztTQUFFO1FBQ3hDLE1BQU0sVUFBVSxHQUFJLFVBQVUsQ0FBQyxNQUEyQixDQUFDLEtBQUssQ0FBQztRQUNqRSxNQUFNLGlCQUFpQixHQUFHLENBQUMsSUFBWSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNyRSxNQUFNLHFCQUFxQixHQUFHLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDaEYsSUFBSSxDQUFDLFVBQVUsR0FBRyxxQkFBcUIsQ0FBQztRQUV4QyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLHFCQUFxQixDQUFDO1FBQ2hELElBQUksQ0FBQyxpQkFBaUIsR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDO1FBQzlDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDVCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQztZQUM5QyxPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQztTQUNsQztRQUNELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUNyQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ3hGLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMzQixDQUFDO0lBRU8sYUFBYSxDQUFDLElBQTRCLEVBQUUsZ0JBQTBCO1FBQzVFLElBQUksY0FBYyxHQUFHLEVBQUUsQ0FBQztRQUN4QixnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxjQUFjLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDdkUsT0FBTyxjQUFjLENBQUM7SUFDeEIsQ0FBQztJQUVPLE9BQU87UUFDYixJQUFJLElBQUksQ0FBQyxrQkFBa0IsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsRUFBRTtZQUNoRixJQUFJLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztZQUM5QyxJQUFJLENBQUMsZ0NBQWdDLEdBQUcsSUFBSSxDQUFDO1lBQzdDLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztTQUMxQjtRQUVELE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixLQUFLLGlCQUFpQixDQUFDO1FBQ3pFLE1BQU0sNkJBQTZCLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixFQUFFO1lBQ2hFLENBQUMsbUJBQW1CLElBQUksSUFBSSxDQUFDLGdDQUFnQyxDQUFDO1FBRS9ELElBQUksNkJBQTZCLEVBQUU7WUFDakMsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLEtBQUssQ0FBQztZQUM5QyxPQUFPO1NBQ1I7UUFDRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbkIsQ0FBQztJQUVPLG9CQUFvQjtRQUMxQixNQUFNLG9CQUFvQixHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDO1FBQzNGLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNwRixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQztRQUNoRCxPQUFPLG9CQUFvQixJQUFJLFlBQVksS0FBSyxJQUFJLENBQUMsa0JBQWtCLENBQUM7SUFDMUUsQ0FBQzs7cUdBdkVVLFFBQVE7eUdBQVIsUUFBUTsyRkFBUixRQUFRO2tCQURwQixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU2VhcmNoZXIge1xuICBwcml2YXRlIGxpc3Q6IFJlY29yZDxzdHJpbmcsIHN0cmluZz5bXSA9IFtdO1xuICBwcml2YXRlIHNlYXJjaFByb3BlcnR5ID0gJyc7XG4gIHByaXZhdGUgc2VhcmNoVGV4dCA9ICcnO1xuICBwcml2YXRlIHByZXZpb3VzU2VhcmNoVGV4dCA9ICcnO1xuICBwcml2YXRlIHByZXZpb3VzSW5wdXR0eXBlID0gJyc7XG4gIHByaXZhdGUgZmlsdGVyZWRMaXN0OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+W10gPSBbXTtcbiAgcHJpdmF0ZSBwcmV2aW91c0ZpbHRlcmVkTGlzdDogUmVjb3JkPHN0cmluZywgc3RyaW5nPltdID0gW107XG4gIHByaXZhdGUgc2hvdWxkUmV0dXJuUHJldmlvdXNGaWx0ZXJlZExpc3QgPSB0cnVlO1xuXG4gIGluaXRTZWFyY2gobGlzdDogUmVjb3JkPHN0cmluZywgc3RyaW5nPltdLCBzZWFyY2hQcm9wZXJ0aWVzOiBzdHJpbmdbXSk6IHZvaWQge1xuICAgIGlmIChzZWFyY2hQcm9wZXJ0aWVzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHRoaXMubGlzdCA9IGxpc3QubWFwKGl0ZW0gPT4gKFxuICAgICAgICB7Li4uaXRlbSwgY29uY2F0ZWRWYWx1ZXM6IHRoaXMuY29uY2F0ZVZhbHVlcyhpdGVtLCBzZWFyY2hQcm9wZXJ0aWVzKX1cbiAgICAgICkpO1xuICAgICAgdGhpcy5zZWFyY2hQcm9wZXJ0eSA9ICdjb25jYXRlZFZhbHVlcyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubGlzdCA9IGxpc3Q7XG4gICAgICB0aGlzLnNlYXJjaFByb3BlcnR5ID0gc2VhcmNoUHJvcGVydGllc1swXTtcbiAgICB9XG4gICAgdGhpcy5wcmV2aW91c0ZpbHRlcmVkTGlzdCA9IHRoaXMubGlzdDtcbiAgfVxuXG4gIGZpbHRlckxpc3QoaW5wdXRFdmVudDogSW5wdXRFdmVudCk6IFJlY29yZDxzdHJpbmcsIHN0cmluZz5bXSB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKGlucHV0RXZlbnQuZGF0YSA9PT0gJyAnKSB7IHJldHVybjsgfVxuICAgIGNvbnN0IHNlYXJjaFRleHQgPSAoaW5wdXRFdmVudC50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWU7XG4gICAgY29uc3QgcmVtb3ZlV2hpdGVzcGFjZXMgPSAodGV4dDogc3RyaW5nKSA9PiB0ZXh0LnNwbGl0KCcgJykuam9pbignJyk7XG4gICAgY29uc3Qgc2VhcmNoVGV4dEluTG93ZXJDYXNlID0gcmVtb3ZlV2hpdGVzcGFjZXMoc2VhcmNoVGV4dCkudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICB0aGlzLnNlYXJjaFRleHQgPSBzZWFyY2hUZXh0SW5Mb3dlckNhc2U7XG5cbiAgICBjb25zdCBsaXN0ID0gdGhpcy5nZXRMaXN0KCk7XG4gICAgdGhpcy5wcmV2aW91c1NlYXJjaFRleHQgPSBzZWFyY2hUZXh0SW5Mb3dlckNhc2U7XG4gICAgdGhpcy5wcmV2aW91c0lucHV0dHlwZSA9IGlucHV0RXZlbnQuaW5wdXRUeXBlO1xuICAgIGlmICghbGlzdCkge1xuICAgICAgdGhpcy5maWx0ZXJlZExpc3QgPSB0aGlzLnByZXZpb3VzRmlsdGVyZWRMaXN0O1xuICAgICAgcmV0dXJuIHRoaXMucHJldmlvdXNGaWx0ZXJlZExpc3Q7XG4gICAgfVxuICAgIHRoaXMuZmlsdGVyZWRMaXN0ID0gbGlzdC5maWx0ZXIoaXRlbSA9PlxuICAgICAgcmVtb3ZlV2hpdGVzcGFjZXMoaXRlbVt0aGlzLnNlYXJjaFByb3BlcnR5XSkudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyh0aGlzLnNlYXJjaFRleHQpKTtcbiAgICByZXR1cm4gdGhpcy5maWx0ZXJlZExpc3Q7XG4gIH1cblxuICBwcml2YXRlIGNvbmNhdGVWYWx1ZXMoaXRlbTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiwgc2VhcmNoUHJvcGVydGllczogc3RyaW5nW10pOiBzdHJpbmcge1xuICAgIGxldCBjb25jYXRlZFZhbHVlcyA9ICcnO1xuICAgIHNlYXJjaFByb3BlcnRpZXMuZm9yRWFjaChwcm9wZXJ0eSA9PiBjb25jYXRlZFZhbHVlcyArPSBpdGVtW3Byb3BlcnR5XSk7XG4gICAgcmV0dXJuIGNvbmNhdGVkVmFsdWVzO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRMaXN0KCk6IFJlY29yZDxzdHJpbmcsIHN0cmluZz5bXSB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKHRoaXMucHJldmlvdXNTZWFyY2hUZXh0ICYmIHRoaXMuc2VhcmNoVGV4dC5pbmNsdWRlcyh0aGlzLnByZXZpb3VzU2VhcmNoVGV4dCkpIHtcbiAgICAgIHRoaXMucHJldmlvdXNGaWx0ZXJlZExpc3QgPSB0aGlzLmZpbHRlcmVkTGlzdDtcbiAgICAgIHRoaXMuc2hvdWxkUmV0dXJuUHJldmlvdXNGaWx0ZXJlZExpc3QgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyZWRMaXN0O1xuICAgIH1cblxuICAgIGNvbnN0IGlzTGFzdFRleHRGcm9tUGFzdGUgPSB0aGlzLnByZXZpb3VzSW5wdXR0eXBlID09PSAnaW5zZXJ0RnJvbVBhc3RlJztcbiAgICBjb25zdCBjYW5SZXR1cm5QcmV2aW91c0ZpbHRlcmVkTGlzdCA9IHRoaXMuaXNCYWNrU3BhY2VkTGFzdENoYXIoKSAmJlxuICAgICAhaXNMYXN0VGV4dEZyb21QYXN0ZSAmJiB0aGlzLnNob3VsZFJldHVyblByZXZpb3VzRmlsdGVyZWRMaXN0O1xuXG4gICAgaWYgKGNhblJldHVyblByZXZpb3VzRmlsdGVyZWRMaXN0KSB7XG4gICAgICB0aGlzLnNob3VsZFJldHVyblByZXZpb3VzRmlsdGVyZWRMaXN0ID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmxpc3Q7XG4gIH1cblxuICBwcml2YXRlIGlzQmFja1NwYWNlZExhc3RDaGFyKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGlzVGV4dERlY3JlbWVudGVkQnkxID0gdGhpcy5wcmV2aW91c1NlYXJjaFRleHQubGVuZ3RoIC0gdGhpcy5zZWFyY2hUZXh0Lmxlbmd0aCA9PT0gMTtcbiAgICBjb25zdCBsYXN0Q2hhciA9IHRoaXMucHJldmlvdXNTZWFyY2hUZXh0LmNoYXJBdCh0aGlzLnByZXZpb3VzU2VhcmNoVGV4dC5sZW5ndGggLSAxKTtcbiAgICBjb25zdCBjb25jYXRlZFRleHQgPSB0aGlzLnNlYXJjaFRleHQgKyBsYXN0Q2hhcjtcbiAgICByZXR1cm4gaXNUZXh0RGVjcmVtZW50ZWRCeTEgJiYgY29uY2F0ZWRUZXh0ID09PSB0aGlzLnByZXZpb3VzU2VhcmNoVGV4dDtcbiAgfVxufVxuIl19