{"version":3,"file":"ngx-cookieconsent.umd.js","sources":["../../tmp/service/window.service.ts","../../tmp/service/cookieconsent-config.ts","../../tmp/service/cookieconsent.service.ts","../../tmp/cookieconsent.module.ts","../../tmp/model/palette-options.ts","../../tmp/model/location-options.ts","../../tmp/model/law-options.ts","../../tmp/model/html-elements.ts","../../tmp/model/cookie-options.ts","../../tmp/model/content-options.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n/**\n * Service to interact with the window object.\n */\n@Injectable()\nexport class WindowService {\n\n  get nativeWindow(): any {\n    return _window();\n  }\n}\n\nfunction _window(): any {\n  // Return the global native browser window object\n  return typeof window !== 'undefined' ? window : undefined;\n}\n","import { Injectable } from '@angular/core';\n\nimport { NgcHTMLElements } from '../model/html-elements';\nimport { NgcLocationOptions } from '../model/location-options';\nimport { NgcLawOptions } from '../model/law-options';\nimport { NgcContentOptions } from '../model/content-options';\nimport { NgcCookieOptions } from '../model/cookie-options';\nimport { NgcPaletteOptions } from '../model/palette-options';\nimport { NgcCompliance, NgcLayouts } from '../model/common-interfaces';\nimport { NgcCookieType, NgcCookieLayout, NgcCookiePosition, NgcCookieTheme } from '../model/common-types';\n\n\n/**\n * Cookie Consent configuration object.\n */\n@Injectable()\nexport class NgcCookieConsentConfig {\n\n  /**\n   * If false, this prevents the popup from showing (useful for giving to control to another piece of code)\n   */\n  enabled ?= true;\n  /**\n   * Optional (expecting a HTML element) if passed, the popup is appended to this element. default is `document.body`\n   */\n  container?: HTMLElement;\n\n  /**\n   * Defaults cookie options - it is RECOMMENDED to set these values to correspond with your server\n   */\n  cookie: NgcCookieOptions;\n\n  /**\n   * Each item defines the inner text for the element that it references\n   */\n  content?: NgcContentOptions;\n\n  /**\n   * This is the HTML for the elements above. The string {{header}} will be replaced with the equivalent text below.\n   * You can remove '{{header}}' and write the content directly inside the HTML if you want.\n   * - ARIA rules suggest to ensure controls are tabbable (so the browser can find the first control),\n   *    and to set the focus to the first interactive control (http://w3c.github.io/aria-in-html/)\n   */\n  elements?: NgcHTMLElements;\n\n  /**\n   * The placeholders {{classes}} and {{children}} both get replaced during initialisation:\n   * - {{classes}} is where additional classes get added\n   * - {{children}} is where the HTML children are placed\n   */\n  window?: string;\n\n  /**\n   * This is the html for the revoke button. This only shows up after the user has selected their level of consent\n   * It can be enabled of disabled using the `revokable` option\n   */\n  revokeBtn?: string;\n\n  /**\n   * Define types of 'compliance' here. '{{value}}' strings in here are linked to `elements`\n   */\n  compliance?: NgcCompliance;\n\n  /**\n   * Select your type of popup here\n   * refers to `compliance` (in other words, the buttons that are displayed)\n   */\n  type?: NgcCookieType;\n\n  /**\n   * define layout layouts here\n   */\n  layouts?: NgcLayouts;\n\n  /**\n   * Default layout (see above)\n   */\n  layout?: NgcCookieLayout;\n\n  /**\n   * This refers to the popup windows position. we currently support:\n   * - banner positions: top, bottom\n   * - floating positions: top-left, top-right, bottom-left, bottom-right\n  *\n   * adds a class `cc-floating` or `cc-banner` which helps when styling\n   */\n  position?: NgcCookiePosition;\n\n  /**\n   * Available styles\n   * - block (default, no extra classes)\n   * - edgeless\n   * - classic\n   * Use your own style name and use `.cc-theme-STYLENAME` class in CSS to edit.\n   * Note: style 'wire' is used for the configurator, but has no CSS styles of its own, only palette is used.\n   */\n  theme?: NgcCookieTheme;\n\n  /**\n   * The popup is `fixed` by default, but if you want it to be static (inline with the page content), set this to false\n   * Note: by default, we animate the height of the popup from 0 to full size\n   */\n  static?: boolean;\n\n  /**\n   * If you want custom colours, pass them in here. this object should look like this.\n   * ideally, any custom colours/themes should be created in a separate style sheet, as this is more efficient.\n   *\n   * {\n   *     popup: {background: '#000000', text: '#fff', link: '#fff'},//\n   *     button: {background: 'transparent', border: '#f8e71c', text: '#f8e71c'},//\n   *     highlight: {background: '#f8e71c', border: '#f8e71c', text: '#000000'},//\n   * }\n   *\n   * `highlight` is optional and extends `button`. if it exists, it will apply to the first button\n   * only background needs to be defined for every element. if not set, other colors can be calculated from it\n   */\n  palette?: NgcPaletteOptions;\n\n  /**\n   * Some countries REQUIRE that a user can change their mind. You can configure this yourself.\n   * Most of the time this should be false, but the `cookieconsent.law` can change this to `true` if it detects that it should\n   */\n  revokable?: boolean;\n  /**\n   * If true, the revokable button will tranlate in and out\n   */\n  animateRevokable?: boolean;\n\n  /**\n   * Used to disable link on existing layouts\n   * replaces element messagelink with message and removes content of link\n   */\n  showLink?: boolean;\n\n  /**\n   * Set value as scroll range to enable\n   */\n  dismissOnScroll?: boolean | number;\n\n  /**\n   * Set value as time in milliseconds to autodismiss after set time\n   */\n  dismissOnTimeout?: boolean | number;\n\n  /**\n   * The application automatically decide whether the popup should open.\n   * Set this to false to prevent this from happening and to allow you to control the behaviour yourself\n   */\n  autoOpen?: boolean;\n\n  /**\n   * By default the created HTML is automatically appended to the container (which defaults to <body>). You can prevent this behaviour\n   * by setting this to false, but if you do, you must attach the `element` yourself, which is a public property of the popup instance:\n   *\n   * var instance = cookieconsent.factory(options);\n   * document.body.appendChild(instance.element);\n   *\n    */\n  autoAttach?: boolean;\n\n  /**\n   * Simple whitelist for pages. specify page by:\n   * - using a string : '/index.html'           (matches '/index.html' exactly) OR\n   * - using RegExp   : /\\/page_[\\d]+\\.html/    (matched '/page_1.html' and '/page_2.html' etc)\n   *\n   */\n  whitelistPage?: string[] = [];\n  /**\n   * Simple blacklist for pages. specify page by:\n   * - using a string : '/index.html'           (matches '/index.html' exactly) OR\n   * - using RegExp   : /\\/page_[\\d]+\\.html/    (matched '/page_1.html' and '/page_2.html' etc)\n   *\n   */\n  blacklistPage?: string[] = [];\n\n  /**\n   * If this is defined, then it is used as the inner html instead of layout. This allows for ultimate customisation.\n   * Be sure to use the classes `cc-btn` and `cc-allow`, `cc-deny` or `cc-dismiss`. They enable the app to register click\n   * handlers. You can use other pre-existing classes too. See `src/styles` folder.\n   *\n   */\n  overrideHTML?: string;\n\n  /**\n   * Law Options\n   */\n  law?: NgcLawOptions;\n\n  /**\n   * Location Options\n   */\n  location?: boolean | NgcLocationOptions;\n\n  /**\n   * Set value as click anything on the page, excluding the `ignoreClicksFrom` below (if we click on the revoke button etc)\n   */\n  dismissOnWindowClick?: boolean;\n\n  /**\n   * If `dismissOnWindowClick` is true, we can click on 'revoke' and we'll still dismiss the banner, so we need exceptions.\n   * Should be an array of class names (not CSS selectors).\n   */\n  ignoreClicksFrom?: string[];\n\n  // these callback hooks are called at certain points in the program execution\n  onPopupOpen?: () => void;\n  onPopupClose?: () => void;\n  onInitialise?: (status: string) => void;\n  onStatusChange?: (status: string, chosenBefore: boolean) => void;\n  onRevokeChoice?: () => void;\n  onNoCookieLaw?: (countryCode: string, country: string) => void;\n\n}\n","import { Injectable } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\n\nimport { NgcCookieConsentStatus } from '../model/common-interfaces';\nimport { NgcStatusChangeEvent } from '../event/status-change.event';\nimport { NgcNoCookieLawEvent } from '../event/no-cookie-law.event';\nimport { NgcInitializeEvent } from '../event/initialize.event';\nimport { NgcCookieConsentConfig } from './cookieconsent-config';\nimport { WindowService } from './window.service';\n\n\n/**\n * Basic interface to represent `cookieconsent` object.\n */\nexport interface NgcCookieConsent {\n  hasTransition: boolean;\n  status: NgcCookieConsentStatus;\n  getStatus(): NgcCookieConsentStatus;\n  initialise(config: NgcCookieConsentConfig, callback?: (popup: NgcCookieConsentPopup) => void): void;\n\n}\n\n/**\n * Basic interface to represent `cookieconsent.Popup` object.\n */\nexport interface NgcCookieConsentPopup {\n  setStatus(status: NgcCookieConsentStatus): void;\n  getStatus(): NgcCookieConsentStatus;\n  clearStatus(): void;\n  open(): NgcCookieConsentPopup;\n  close(showRevoke: boolean): NgcCookieConsentPopup;\n  destroy(): void;\n  fadeIn(): void;\n  fadeOut(): void;\n  isOpen(): boolean;\n  toggleRevokeButton(show: boolean): void;\n  hasAnswered(): boolean;\n  hasConsented(): boolean;\n}\n\n\n/**\n * Marker interface to indicate that an object (typically `window`) has `cookieconsent` property.\n */\nexport interface NgcHasCookieConsent {\n  cookieconsent: NgcCookieConsent;\n}\n\n\n/**\n * Service to interact with Cookie Consent API.\n */\n@Injectable()\nexport class NgcCookieConsentService {\n\n  // the Magic Maker !\n  // this objet is added to window scope when linking the cookieconsent.js library\n  private cookieconsent: NgcCookieConsent;\n\n  // the current instance of the cookie consent popup\n  private popupInstance: NgcCookieConsentPopup;\n\n  // Window Object\n  private window: Window & NgcHasCookieConsent;\n\n  private config: NgcCookieConsentConfig;\n\n  // Observable  sources\n  private popupOpenSource: Subject<void>;\n  private popupCloseSource: Subject<void>;\n  private initializeSource: Subject<NgcInitializeEvent>;\n  private statusChangeSource: Subject<NgcStatusChangeEvent>;\n  private revokeChoiceSource: Subject<void>;\n  private noCookieLawSource: Subject<NgcNoCookieLawEvent>;\n\n  /**\n   * Observable to subscribe to and get notified when Cookie Consent popup opens.\n   */\n  popupOpen$: Observable<void>;\n  /**\n   * Observable to subscribe to and get notified when Cookie Consent popup closes.\n   */\n  popupClose$: Observable<void>;\n  /**\n   * Observable to subscribe to and get notified when Cookie Consent initializes.\n   */\n  initialize$: Observable<NgcInitializeEvent>;\n  /**\n  * Observable to subscribe to and get notified when Cookie Consent status changes.\n  */\n  statusChange$: Observable<NgcStatusChangeEvent>;\n  /**\n   * Observable to subscribe to and get notified when Cookie is revoked.\n   */\n  revokeChoice$: Observable<void>;\n  /**\n  * Observable to subscribe to and get notified when no Cookie Law is applicable.\n  */\n  noCookieLaw$: Observable<NgcNoCookieLawEvent>;\n\n  constructor(windowService: WindowService, config: NgcCookieConsentConfig) {\n    // Observable  sources\n    this.popupOpenSource = new Subject<void>();\n    this.popupCloseSource = new Subject<void>();\n    this.initializeSource = new Subject<NgcInitializeEvent>();\n    this.statusChangeSource = new Subject<NgcStatusChangeEvent>();\n    this.revokeChoiceSource = new Subject<void>();\n    this.noCookieLawSource = new Subject<NgcNoCookieLawEvent>();\n\n    // Observable  streams\n    this.popupOpen$ = this.popupOpenSource.asObservable();\n    this.popupClose$ = this.popupCloseSource.asObservable();\n    this.initialize$ = this.initializeSource.asObservable();\n    this.statusChange$ = this.statusChangeSource.asObservable();\n    this.revokeChoice$ = this.revokeChoiceSource.asObservable();\n    this.noCookieLaw$ = this.noCookieLawSource.asObservable();\n\n    this.window = windowService.nativeWindow;\n    this.init(config);\n  }\n\n  private checkPopupInstantiated(method: string) {\n    if (this.popupInstance == null) {\n      throw new Error(`Cookie popup has not yet been instantiated. Cannot invoke ${method}()`);\n    }\n  }\n\n  /**\n   * Initializes Cookie Consent with the provided configuration.\n   * @param config the configuration object\n   */\n  init(config: NgcCookieConsentConfig): void {\n\n    if (this.window) { // For Angular Universal suport\n      this.cookieconsent = this.window.cookieconsent;\n\n      this.config = config;\n      // Set callbacks hooks:\n      this.config.onPopupOpen =\n        () => this.popupOpenSource.next();\n\n      this.config.onPopupClose =\n        () => this.popupCloseSource.next();\n\n      this.config.onInitialise =\n        (status: 'allow' | 'deny' | 'dismiss') => this.initializeSource.next({ status: status });\n\n      this.config.onStatusChange =\n        (status: 'allow' | 'deny' | 'dismiss', chosenBefore: boolean) => {\n          this.statusChangeSource.next({ status: status, chosenBefore: chosenBefore });\n        };\n\n      this.config.onRevokeChoice =\n        () => this.revokeChoiceSource.next();\n\n      this.config.onNoCookieLaw =\n        (countryCode: string, country: string) => {\n          this.noCookieLawSource.next({ countryCode: countryCode, country: country });\n        };\n\n      // Init the cookieconsent library with injected config\n      this.cookieconsent.initialise(this.config, (popup: NgcCookieConsentPopup) => this.popupInstance = popup);\n    }\n  }\n\n  /**\n   * Gets the current configuration  used by the Cookie Consent.\n   */\n  getConfig(): NgcCookieConsentConfig {\n    return this.config;\n  }\n\n  /**\n   * Gets the current cookie status.\n   */\n  getStatus(): NgcCookieConsentStatus {\n    return this.cookieconsent.status;\n  }\n\n  /**\n   * Gets the current browser support for translations\n   */\n  getTransition(): boolean {\n    return this.cookieconsent.hasTransition;\n  }\n\n  /**\n   * Clears the current cookie status.\n   */\n  clearStatus(): void {\n    this.checkPopupInstantiated('clearStatus');\n    return this.popupInstance.clearStatus();\n  }\n\n  open(): NgcCookieConsentPopup {\n    this.checkPopupInstantiated('open');\n    return this.popupInstance.open();\n  }\n\n  close(showRevoke: boolean): NgcCookieConsentPopup {\n    this.checkPopupInstantiated('close');\n    return this.popupInstance.close(showRevoke);\n  }\n\n  destroy(): void {\n    this.checkPopupInstantiated('destroy');\n    this.popupInstance.destroy();\n  }\n\n  fadeIn(): void {\n    this.checkPopupInstantiated('fadeIn');\n    this.popupInstance.fadeIn();\n  }\n\n  fadeOut(): void {\n    this.checkPopupInstantiated('fadeOut');\n    this.popupInstance.fadeOut();\n  }\n\n  isOpen(): boolean {\n    this.checkPopupInstantiated('isOpen');\n    return this.popupInstance.isOpen();\n  }\n\n  toggleRevokeButton(show: boolean): void {\n    this.checkPopupInstantiated('toggleRevokeButton');\n    this.popupInstance.toggleRevokeButton(show);\n  }\n\n  hasAnswered(): boolean {\n    this.checkPopupInstantiated('hasAnswered');\n    return this.popupInstance.hasAnswered();\n  }\n\n  hasConsented(): boolean {\n    this.checkPopupInstantiated('hasConsented');\n    return this.popupInstance.hasConsented();\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { WindowService, NgcCookieConsentConfig, NgcCookieConsentService } from './service/index';\n\n/**\n * Main module of the library\n */\n@NgModule({\n  imports: [\n    CommonModule\n  ]\n})\nexport class NgcCookieConsentModule {\n\n  static forRoot(config: NgcCookieConsentConfig): ModuleWithProviders {\n    return {\n      ngModule: NgcCookieConsentModule,\n      providers: [WindowService, { provide: NgcCookieConsentConfig, useValue: config }, NgcCookieConsentService]\n    };\n  }\n}\n","import { NgcPalette } from './common-interfaces';\n/**\n * Palette Options\n *\n * Colours can be defined in additional stylesheets or using attributes.\n */\nexport class NgcPaletteOptions {\n  popup?: NgcPalette = { background: '#000000', text: '#fff', link: '#fff' };\n\n  button?: NgcPalette = { background: 'transparent', border: '#f8e71c', text: '#f8e71c' };\n\n  highlight?: NgcPalette = { background: '#f8e71c', border: '#f8e71c', text: '#000000' };\n\n}\n","/* tslint:disable:max-line-length */\n/**\n * Location Options\n *\n * The location services are disabled by default. You are encouraged to implement a handler to your own service, rather than using the free ones provided.\n * To enable the basic location services, set 'location' to 'true'. To add you own services or configure the order or execution, pass an object with configuration properties.\n */\nexport class NgcLocationOptions {\n\n  /**\n   * We can't react to errors from script tag resources, so we set a timeout. If we don't have the answer after 5000ms, try the next service.\n   * Default: 5000 (milliseconds)\n   */\n  timeout ?= 5000;\n  /**\n   * This array defines the services that you want to use. We attempt to get the country code from the first service, and only if the service fails do we move onto the next service.\n   * If all services fail, the popup is opened without modification.\n   * If a service succeeds, then the two letter country code is passed to the 'Law' module, with changes your popup options depending on the cookie laws in the country code.\n   * Default: ['freegeoip', 'ipinfo', 'maxmind']\n   */\n  services ?: any[] = ['freegeoip', 'ipinfo', 'maxmind'];\n\n  /**\n   * This can be used to define new services via a key, but new services they can also go straight into the 'services' array in an ad-hoc fashion.\n   *  It is recommended that you define services in 'serviceDefinitions' and use 'services' to configure priority between services\n   */\n  serviceDefinitions ?: { [key: string]: (...options: any[]) => any };\n\n}\n","/**\n * Law Optons.\n */\nexport class NgcLawOptions {\n  // Rather than getting the country code from the location services, you can hard code a particular country into the tool.\n  countryCode: string;\n\n  // If false, then we only enable the popup if the country has the cookie law. We ignore all other country specific rules.\n  // Default: true\n  regionalLaw ?= true;\n}\n","/* tslint:disable:max-line-length */\n/**\n * HTML Elements\n */\nexport class NgcHTMLElements {\n\n  header ? = '<span class=\"cc-header\">{{header}}</span>&nbsp;';\n\n  message ? = '<span id=\"cookieconsent:desc\" class=\"cc-message\">{{message}}</span>';\n\n  messagelink ? = '<span id=\"cookieconsent:desc\" class=\"cc-message\">{{message}} <a aria-label=\"learn more about cookies\" tabindex=\"0\" class=\"cc-link\" href=\"{{href}}\" target=\"_blank\">{{link}}</a></span>';\n\n  dismiss ? = '<a aria-label=\"dismiss cookie message\" tabindex=\"0\" class=\"cc-btn cc-dismiss\">{{dismiss}}</a>';\n\n  allow ? = '<a aria-label=\"allow cookies\" tabindex=\"0\" class=\"cc-btn cc-allow\">{{allow}}</a>';\n\n  deny ? = '<a aria-label=\"deny cookies\" tabindex=\"0\" class=\"cc-btn cc-deny\">{{deny}}</a>';\n\n  link ? = '<a aria-label=\"learn more about cookies\" tabindex=\"0\" class=\"cc-link\" href=\"{{href}}\" target=\"_blank\">{{link}}</a>';\n\n  close ? = '<span aria-label=\"dismiss cookie message\" tabindex=\"0\" class=\"cc-close\">{{close}}</span>';\n\n  [key: string]: string | undefined;\n}\n","/**\n * Cookie Options.\n *\n * It is recommended to set these values to correspond with your server.\n * You MUST set the ‘domain’ option, otherwise your cookies may not work.\n */\nexport class NgcCookieOptions {\n\n  // Name of the cookie that keeps track of users choice\n  // Default: 'cookieconsent_status'\n  name ? = 'cookieconsent_status';\n\n  // URL path that the cookie 'name' belongs to. The cookie can only be read at this location\n  // Default: '/'\n  path ? = '/';\n\n  // The domain that the cookie 'name' belongs to. The cookie can only be read on this domain. Guide to cookie domains\n  // Default: <empty string>\n  domain: string;\n\n  // The cookies expire date, specified in days (specify -1 for no expiry)\n  // Default: 365\n  expiryDays ? = 365;\n\n  // If true the cookie will be created with the secure flag. Secure cookies will only be transmitted via HTTPS.\n  secure ? = false;\n}\n","/**\n * Content Options.\n *\n * Text strings used for cookie consent window elements.\n */\nexport class NgcContentOptions {\n\n  header ? = 'Cookies used on the website!';\n\n  message ? = 'This website uses cookies to ensure you get the best experience on our website.';\n\n  dismiss ? = 'Got it!';\n\n  allow ? = 'Allow cookies';\n\n  deny ? = 'Decline';\n\n  link ? = 'Learn more';\n\n  href ? = 'https://cookiesandyou.com';\n\n  close ? = '&#x274c;';\n\n  policy ? = 'Cookie Policy';\n\n  target ? = '_blank';\n\n  [key: string]: string | undefined;\n}\n"],"names":["Injectable","Subject","NgModule","CommonModule"],"mappings":"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"}