import { EventEmitter, Component, forwardRef, Input, Output, NgModule } from '@angular/core';
import { FormControl, NG_VALUE_ACCESSOR, ReactiveFormsModule } from '@angular/forms';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { CommonModule } from '@angular/common';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';

class QuantityInputComponent {
    constructor() {
        this.quantityCtrl = new FormControl(1);
        this.limit = 10000000;
        // Allow the input to be disabled, and when it is make it somewhat transparent.
        this.disabled = false;
        this._unsubscribeAll = new Subject();
        this.quantityChange = new EventEmitter();
        // Function to call when the quantity changes.
        this.onChange = (quantity) => {
            this.quantityChange.emit(quantity);
        };
        // Function to call when the input is touched (when a star is clicked).
        this.onTouched = () => { };
        this.quantityCtrl.valueChanges
            .pipe(takeUntil(this._unsubscribeAll))
            .subscribe((val) => {
            if (this.quantityCtrl.value < 1) {
                this.writeValue(1);
            }
            else if (this.quantityCtrl.value > this.limit) {
                this.writeValue(this.limit);
            }
            else {
                this.writeValue(this.quantityCtrl.value);
            }
        });
    }
    set limitValue(v) {
        if (!v) {
            return;
        }
        this.limit = parseInt(v);
    }
    set disabledValue(v) {
        if (!v) {
            return;
        }
        this.quantityCtrl.disable();
        this.disabled = v;
    }
    get value() {
        return this.quantityCtrl.value;
    }
    increase() {
        if (!this.disabled) {
            this.quantityCtrl.setValue((this.quantityCtrl.value + 1));
        }
    }
    decrease() {
        if (!this.disabled) {
            this.quantityCtrl.setValue((this.quantityCtrl.value - 1));
        }
    }
    // Allows Angular to update the model (quantity).
    // Update the model and changes needed for the view here.
    writeValue(quantity) {
        this.quantityCtrl.setValue(quantity, { emitEvent: false });
        this.onChange(this.value);
    }
    // Allows Angular to register a function to call when the model (quantity) changes.
    // Save the function as a property to call later here.
    registerOnChange(fn) {
        this.onChange = fn;
    }
    // Allows Angular to register a function to call when the input has been touched.
    // Save the function as a property to call later here.
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    // Allows Angular to disable the input.
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        if (isDisabled) {
            this.quantityCtrl.disable();
        }
        else {
            this.quantityCtrl.enable();
        }
    }
    ngOnDestroy() {
        this._unsubscribeAll.next();
        this._unsubscribeAll.complete();
    }
}
QuantityInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'quantity-input',
                template: "<div class=\"nghacks-quantity-input-container\">\n\n  <button (click)=\"decrease()\" mat-raised-button [color]=\"color\" [disabled]=\"disabled || quantityCtrl.value === 1\">\n    <mat-icon>remove</mat-icon>\n  </button>\n\n  <input [style.borderColor]=\"disabled ? '#e0e0e0' : '#212121'\" [formControl]=\"quantityCtrl\" #queantityInputElem type=\"number\" min=\"1\" max=\"10\">\n\n  <button (click)=\"increase()\" mat-raised-button [color]=\"color\" [disabled]=\"disabled || quantityCtrl.value === limit\">\n    <mat-icon>add</mat-icon>\n  </button>\n\n</div>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => QuantityInputComponent),
                        multi: true
                    }
                ],
                styles: [".nghacks-quantity-input-container{align-items:center;display:inline-flex;justify-content:center}.nghacks-quantity-input-container button{border-radius:50%;min-width:0;padding:0;width:36px}.nghacks-quantity-input-container input{background:transparent;border:none;border-bottom:1px solid;box-sizing:border-box;height:36px;margin:0 5px;outline:none;text-align:center;width:40px}.nghacks-quantity-input-container input::-webkit-inner-spin-button,.nghacks-quantity-input-container input::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}.nghacks-quantity-input-container input[type=number]{-moz-appearance:textfield}"]
            },] }
];
QuantityInputComponent.ctorParameters = () => [];
QuantityInputComponent.propDecorators = {
    color: [{ type: Input }],
    limitValue: [{ type: Input, args: ['limit',] }],
    disabledValue: [{ type: Input, args: ['disabled',] }],
    quantityChange: [{ type: Output }]
};

class QuantityInputModule {
}
QuantityInputModule.decorators = [
    { type: NgModule, args: [{
                declarations: [QuantityInputComponent],
                imports: [
                    CommonModule,
                    MatButtonModule,
                    MatIconModule,
                    ReactiveFormsModule
                ],
                exports: [QuantityInputComponent]
            },] }
];

/*
 * Public API Surface of quantity-input
 */

/**
 * Generated bundle index. Do not edit.
 */

export { QuantityInputComponent, QuantityInputModule };
//# sourceMappingURL=nghacks-quantity-input.js.map
