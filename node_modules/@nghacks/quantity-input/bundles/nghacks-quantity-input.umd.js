(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('rxjs'), require('rxjs/operators'), require('@angular/common'), require('@angular/material/icon'), require('@angular/material/button')) :
    typeof define === 'function' && define.amd ? define('@nghacks/quantity-input', ['exports', '@angular/core', '@angular/forms', 'rxjs', 'rxjs/operators', '@angular/common', '@angular/material/icon', '@angular/material/button'], factory) :
    (global = global || self, factory((global.nghacks = global.nghacks || {}, global.nghacks['quantity-input'] = {}), global.ng.core, global.ng.forms, global.rxjs, global.rxjs.operators, global.ng.common, global.ng.material.icon, global.ng.material.button));
}(this, (function (exports, core, forms, rxjs, operators, common, icon, button) { 'use strict';

    var QuantityInputComponent = /** @class */ (function () {
        function QuantityInputComponent() {
            var _this = this;
            this.quantityCtrl = new forms.FormControl(1);
            this.limit = 10000000;
            // Allow the input to be disabled, and when it is make it somewhat transparent.
            this.disabled = false;
            this._unsubscribeAll = new rxjs.Subject();
            this.quantityChange = new core.EventEmitter();
            // Function to call when the quantity changes.
            this.onChange = function (quantity) {
                _this.quantityChange.emit(quantity);
            };
            // Function to call when the input is touched (when a star is clicked).
            this.onTouched = function () { };
            this.quantityCtrl.valueChanges
                .pipe(operators.takeUntil(this._unsubscribeAll))
                .subscribe(function (val) {
                if (_this.quantityCtrl.value < 1) {
                    _this.writeValue(1);
                }
                else if (_this.quantityCtrl.value > _this.limit) {
                    _this.writeValue(_this.limit);
                }
                else {
                    _this.writeValue(_this.quantityCtrl.value);
                }
            });
        }
        Object.defineProperty(QuantityInputComponent.prototype, "limitValue", {
            set: function (v) {
                if (!v) {
                    return;
                }
                this.limit = parseInt(v);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(QuantityInputComponent.prototype, "disabledValue", {
            set: function (v) {
                if (!v) {
                    return;
                }
                this.quantityCtrl.disable();
                this.disabled = v;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(QuantityInputComponent.prototype, "value", {
            get: function () {
                return this.quantityCtrl.value;
            },
            enumerable: false,
            configurable: true
        });
        QuantityInputComponent.prototype.increase = function () {
            if (!this.disabled) {
                this.quantityCtrl.setValue((this.quantityCtrl.value + 1));
            }
        };
        QuantityInputComponent.prototype.decrease = function () {
            if (!this.disabled) {
                this.quantityCtrl.setValue((this.quantityCtrl.value - 1));
            }
        };
        // Allows Angular to update the model (quantity).
        // Update the model and changes needed for the view here.
        QuantityInputComponent.prototype.writeValue = function (quantity) {
            this.quantityCtrl.setValue(quantity, { emitEvent: false });
            this.onChange(this.value);
        };
        // Allows Angular to register a function to call when the model (quantity) changes.
        // Save the function as a property to call later here.
        QuantityInputComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        // Allows Angular to register a function to call when the input has been touched.
        // Save the function as a property to call later here.
        QuantityInputComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        // Allows Angular to disable the input.
        QuantityInputComponent.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
            if (isDisabled) {
                this.quantityCtrl.disable();
            }
            else {
                this.quantityCtrl.enable();
            }
        };
        QuantityInputComponent.prototype.ngOnDestroy = function () {
            this._unsubscribeAll.next();
            this._unsubscribeAll.complete();
        };
        return QuantityInputComponent;
    }());
    QuantityInputComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'quantity-input',
                    template: "<div class=\"nghacks-quantity-input-container\">\n\n  <button (click)=\"decrease()\" mat-raised-button [color]=\"color\" [disabled]=\"disabled || quantityCtrl.value === 1\">\n    <mat-icon>remove</mat-icon>\n  </button>\n\n  <input [style.borderColor]=\"disabled ? '#e0e0e0' : '#212121'\" [formControl]=\"quantityCtrl\" #queantityInputElem type=\"number\" min=\"1\" max=\"10\">\n\n  <button (click)=\"increase()\" mat-raised-button [color]=\"color\" [disabled]=\"disabled || quantityCtrl.value === limit\">\n    <mat-icon>add</mat-icon>\n  </button>\n\n</div>\n",
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: core.forwardRef(function () { return QuantityInputComponent; }),
                            multi: true
                        }
                    ],
                    styles: [".nghacks-quantity-input-container{align-items:center;display:inline-flex;justify-content:center}.nghacks-quantity-input-container button{border-radius:50%;min-width:0;padding:0;width:36px}.nghacks-quantity-input-container input{background:transparent;border:none;border-bottom:1px solid;box-sizing:border-box;height:36px;margin:0 5px;outline:none;text-align:center;width:40px}.nghacks-quantity-input-container input::-webkit-inner-spin-button,.nghacks-quantity-input-container input::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}.nghacks-quantity-input-container input[type=number]{-moz-appearance:textfield}"]
                },] }
    ];
    QuantityInputComponent.ctorParameters = function () { return []; };
    QuantityInputComponent.propDecorators = {
        color: [{ type: core.Input }],
        limitValue: [{ type: core.Input, args: ['limit',] }],
        disabledValue: [{ type: core.Input, args: ['disabled',] }],
        quantityChange: [{ type: core.Output }]
    };

    var QuantityInputModule = /** @class */ (function () {
        function QuantityInputModule() {
        }
        return QuantityInputModule;
    }());
    QuantityInputModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [QuantityInputComponent],
                    imports: [
                        common.CommonModule,
                        button.MatButtonModule,
                        icon.MatIconModule,
                        forms.ReactiveFormsModule
                    ],
                    exports: [QuantityInputComponent]
                },] }
    ];

    /*
     * Public API Surface of quantity-input
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.QuantityInputComponent = QuantityInputComponent;
    exports.QuantityInputModule = QuantityInputModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=nghacks-quantity-input.umd.js.map
