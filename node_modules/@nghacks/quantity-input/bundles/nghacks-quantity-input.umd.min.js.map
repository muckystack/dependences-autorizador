{"version":3,"sources":["../../../projects/quantity-input/src/lib/quantity-input.component.ts","../../../projects/quantity-input/src/lib/quantity-input.module.ts"],"names":["QuantityInputComponent","_this","this","quantityCtrl","FormControl","limit","disabled","_unsubscribeAll","Subject","quantityChange","EventEmitter","onChange","quantity","emit","onTouched","valueChanges","pipe","takeUntil","subscribe","val","value","writeValue","Object","defineProperty","prototype","v","parseInt","disable","increase","setValue","decrease","emitEvent","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","enable","ngOnDestroy","next","complete","Component","args","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","Input","Output","NgModule","declarations","imports","CommonModule","MatButtonModule","MatIconModule","ReactiveFormsModule","exports"],"mappings":"wsBAsDE,SAAAA,IAAA,IAAAC,EAAAC,KAnCAA,KAAAC,aAAe,IAAIC,EAAAA,YAAY,GAI/BF,KAAAG,MAAQ,IAQRH,KAAAI,UAAW,EAQHJ,KAAAK,gBAAgC,IAAIC,EAAAA,QAElCN,KAAAO,eAAiB,IAAIC,EAAAA,aAG/BR,KAAAS,SAAW,SAACC,GACVX,EAAKQ,eAAeI,KAAKD,IAI3BV,KAAAY,UAAY,aAMVZ,KAAKC,aAAaY,aACfC,KACCC,EAAAA,UAAUf,KAAKK,kBAEhBW,WAAU,SAACC,GACNlB,EAAKE,aAAaiB,MAAQ,EAC5BnB,EAAKoB,WAAW,GAETpB,EAAKE,aAAaiB,MAAQnB,EAAKI,MACtCJ,EAAKoB,WAAWpB,EAAKI,OAGrBJ,EAAKoB,WAAWpB,EAAKE,aAAaiB,iBA3C1CE,OAAAC,eACYvB,EAAAwB,UAAA,aAAU,KADtB,SACuBC,GAChBA,IACLvB,KAAKG,MAAQqB,SAASD,qCAKxBH,OAAAC,eACYvB,EAAAwB,UAAA,gBAAa,KADzB,SAC0BC,GACnBA,IACLvB,KAAKC,aAAawB,UAClBzB,KAAKI,SAAWmB,oCAclBH,OAAAC,eAAIvB,EAAAwB,UAAA,QAAK,KAAT,WACE,OAAOtB,KAAKC,aAAaiB,uCAqB3BpB,EAAAwB,UAAAI,SAAA,WACO1B,KAAKI,UACRJ,KAAKC,aAAa0B,SAAU3B,KAAKC,aAAaiB,MAAQ,IAI1DpB,EAAAwB,UAAAM,SAAA,WACO5B,KAAKI,UACRJ,KAAKC,aAAa0B,SAAU3B,KAAKC,aAAaiB,MAAQ,IAM1DpB,EAAAwB,UAAAH,WAAA,SAAWT,GACTV,KAAKC,aAAa0B,SAASjB,EAAU,CAAEmB,WAAW,IAClD7B,KAAKS,SAAST,KAAKkB,QAKrBpB,EAAAwB,UAAAQ,iBAAA,SAAiBC,GACf/B,KAAKS,SAAWsB,GAKlBjC,EAAAwB,UAAAU,kBAAA,SAAkBD,GAChB/B,KAAKY,UAAYmB,GAInBjC,EAAAwB,UAAAW,iBAAA,SAAiBC,GACflC,KAAKI,SAAW8B,EACZA,EACFlC,KAAKC,aAAawB,UAGlBzB,KAAKC,aAAakC,UAIfrC,EAAAwB,UAAAc,YAAA,WACLpC,KAAKK,gBAAgBgC,OACrBrC,KAAKK,gBAAgBiC,qCA/GxBC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,iBACVC,SAAA,giBAEAC,UAAW,CACT,CACEC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,YAAW,WAAM,OAAAjD,KAC9BkD,OAAO,usBAQVC,EAAAA,0BAGAA,EAAAA,MAAKT,KAAA,CAAC,gCAQNS,EAAAA,MAAKT,KAAA,CAAC,oCASNU,EAAAA,gBCxBH,iCAVCC,EAAAA,SAAQX,KAAA,CAAC,CACRY,aAAc,CAACtD,GACfuD,QAAS,CACPC,EAAAA,aACAC,EAAAA,gBACAC,EAAAA,cACAC,EAAAA,qBAEFC,QAAS,CAAC5D","sourcesContent":["import { Component, EventEmitter, forwardRef, Input, OnDestroy, Output } from '@angular/core';\nimport { ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'quantity-input',\n  templateUrl: './quantity-input.component.html',\n  styleUrls: ['./quantity-input.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => QuantityInputComponent),\n      multi: true\n    }\n  ]\n})\nexport class QuantityInputComponent implements ControlValueAccessor, OnDestroy {\n\n  quantityCtrl = new FormControl(1);\n\n  @Input() color: string;\n\n  limit = 10000000;\n  @Input('limit')\n  private set limitValue(v: string) {\n    if (!v) { return; }\n    this.limit = parseInt(v);\n  }\n\n  // Allow the input to be disabled, and when it is make it somewhat transparent.\n  disabled = false;\n  @Input('disabled')\n  private set disabledValue(v: boolean) {\n    if (!v) { return; }\n    this.quantityCtrl.disable();\n    this.disabled = v;\n  }\n\n  private _unsubscribeAll: Subject<any> = new Subject();\n\n  @Output() quantityChange = new EventEmitter<number>();\n\n  // Function to call when the quantity changes.\n  onChange = (quantity: number) => {\n    this.quantityChange.emit(quantity);\n  }\n\n  // Function to call when the input is touched (when a star is clicked).\n  onTouched = () => { };\n  get value(): number {\n    return this.quantityCtrl.value;\n  }\n\n  constructor() {\n    this.quantityCtrl.valueChanges\n      .pipe(\n        takeUntil(this._unsubscribeAll)\n      )\n      .subscribe((val) => {\n        if (this.quantityCtrl.value < 1) {\n          this.writeValue(1);\n        }\n        else if (this.quantityCtrl.value > this.limit) {\n          this.writeValue(this.limit);\n        }\n        else {\n          this.writeValue(this.quantityCtrl.value);\n        }\n      });\n  }\n\n  increase(): void {\n    if (!this.disabled) {\n      this.quantityCtrl.setValue((this.quantityCtrl.value + 1));\n    }\n  }\n\n  decrease(): void {\n    if (!this.disabled) {\n      this.quantityCtrl.setValue((this.quantityCtrl.value - 1));\n    }\n  }\n\n  // Allows Angular to update the model (quantity).\n  // Update the model and changes needed for the view here.\n  writeValue(quantity: number): void {\n    this.quantityCtrl.setValue(quantity, { emitEvent: false });\n    this.onChange(this.value);\n  }\n\n  // Allows Angular to register a function to call when the model (quantity) changes.\n  // Save the function as a property to call later here.\n  registerOnChange(fn: (quantity: number) => void): void {\n    this.onChange = fn;\n  }\n\n  // Allows Angular to register a function to call when the input has been touched.\n  // Save the function as a property to call later here.\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  // Allows Angular to disable the input.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    if (isDisabled) {\n      this.quantityCtrl.disable();\n    }\n    else {\n      this.quantityCtrl.enable();\n    }\n  }\n\n  public ngOnDestroy(): void {\n    this._unsubscribeAll.next();\n    this._unsubscribeAll.complete();\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { QuantityInputComponent } from './quantity-input.component';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [QuantityInputComponent],\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatIconModule,\n    ReactiveFormsModule\n  ],\n  exports: [QuantityInputComponent]\n})\nexport class QuantityInputModule { }\n"]}