!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/core"),require("@angular/forms"),require("rxjs"),require("rxjs/operators"),require("@angular/common"),require("@angular/material/icon"),require("@angular/material/button")):"function"==typeof define&&define.amd?define("@nghacks/quantity-input",["exports","@angular/core","@angular/forms","rxjs","rxjs/operators","@angular/common","@angular/material/icon","@angular/material/button"],e):e(((t=t||self).nghacks=t.nghacks||{},t.nghacks["quantity-input"]={}),t.ng.core,t.ng.forms,t.rxjs,t.rxjs.operators,t.ng.common,t.ng.material.icon,t.ng.material.button)}(this,(function(t,e,n,i,a,r,o,u){"use strict";var s=function(){function t(){var t=this;this.quantityCtrl=new n.FormControl(1),this.limit=1e7,this.disabled=!1,this._unsubscribeAll=new i.Subject,this.quantityChange=new e.EventEmitter,this.onChange=function(e){t.quantityChange.emit(e)},this.onTouched=function(){},this.quantityCtrl.valueChanges.pipe(a.takeUntil(this._unsubscribeAll)).subscribe((function(e){t.quantityCtrl.value<1?t.writeValue(1):t.quantityCtrl.value>t.limit?t.writeValue(t.limit):t.writeValue(t.quantityCtrl.value)}))}return Object.defineProperty(t.prototype,"limitValue",{set:function(t){t&&(this.limit=parseInt(t))},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"disabledValue",{set:function(t){t&&(this.quantityCtrl.disable(),this.disabled=t)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"value",{get:function(){return this.quantityCtrl.value},enumerable:!1,configurable:!0}),t.prototype.increase=function(){this.disabled||this.quantityCtrl.setValue(this.quantityCtrl.value+1)},t.prototype.decrease=function(){this.disabled||this.quantityCtrl.setValue(this.quantityCtrl.value-1)},t.prototype.writeValue=function(t){this.quantityCtrl.setValue(t,{emitEvent:!1}),this.onChange(this.value)},t.prototype.registerOnChange=function(t){this.onChange=t},t.prototype.registerOnTouched=function(t){this.onTouched=t},t.prototype.setDisabledState=function(t){this.disabled=t,t?this.quantityCtrl.disable():this.quantityCtrl.enable()},t.prototype.ngOnDestroy=function(){this._unsubscribeAll.next(),this._unsubscribeAll.complete()},t}();s.decorators=[{type:e.Component,args:[{selector:"quantity-input",template:'<div class="nghacks-quantity-input-container">\n\n  <button (click)="decrease()" mat-raised-button [color]="color" [disabled]="disabled || quantityCtrl.value === 1">\n    <mat-icon>remove</mat-icon>\n  </button>\n\n  <input [style.borderColor]="disabled ? \'#e0e0e0\' : \'#212121\'" [formControl]="quantityCtrl" #queantityInputElem type="number" min="1" max="10">\n\n  <button (click)="increase()" mat-raised-button [color]="color" [disabled]="disabled || quantityCtrl.value === limit">\n    <mat-icon>add</mat-icon>\n  </button>\n\n</div>\n',providers:[{provide:n.NG_VALUE_ACCESSOR,useExisting:e.forwardRef((function(){return s})),multi:!0}],styles:[".nghacks-quantity-input-container{align-items:center;display:inline-flex;justify-content:center}.nghacks-quantity-input-container button{border-radius:50%;min-width:0;padding:0;width:36px}.nghacks-quantity-input-container input{background:transparent;border:none;border-bottom:1px solid;box-sizing:border-box;height:36px;margin:0 5px;outline:none;text-align:center;width:40px}.nghacks-quantity-input-container input::-webkit-inner-spin-button,.nghacks-quantity-input-container input::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}.nghacks-quantity-input-container input[type=number]{-moz-appearance:textfield}"]}]}],s.ctorParameters=function(){return[]},s.propDecorators={color:[{type:e.Input}],limitValue:[{type:e.Input,args:["limit"]}],disabledValue:[{type:e.Input,args:["disabled"]}],quantityChange:[{type:e.Output}]};var l=function(){};l.decorators=[{type:e.NgModule,args:[{declarations:[s],imports:[r.CommonModule,u.MatButtonModule,o.MatIconModule,n.ReactiveFormsModule],exports:[s]}]}],t.QuantityInputComponent=s,t.QuantityInputModule=l,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=nghacks-quantity-input.umd.min.js.map